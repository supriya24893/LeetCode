Table: Teams

+----------------+---------+
| Column Name    | Type    |
+----------------+---------+
| team_id        | int     |
| team_name      | varchar |
+----------------+---------+
team_id is the primary key for this table.
Each row contains information about one team in the league.
 

Table: Matches

+-----------------+---------+
| Column Name     | Type    |
+-----------------+---------+
| home_team_id    | int     |
| away_team_id    | int     |
| home_team_goals | int     |
| away_team_goals | int     |
+-----------------+---------+
(home_team_id, away_team_id) is the primary key for this table.
Each row contains information about one match.
home_team_goals is the number of goals scored by the home team.
away_team_goals is the number of goals scored by the away team.
The winner of the match is the team with the higher number of goals.
 

Write an SQL query to report the statistics of the league. The statistics should be built using the played matches where the winning team gets three points and the losing team gets no points. If a match ends with a draw, both teams get one point.

Each row of the result table should contain:

team_name - The name of the team in the Teams table.
matches_played - The number of matches played as either a home or away team.
points - The total points the team has so far.
goal_for - The total number of goals scored by the team across all matches.
goal_against - The total number of goals scored by opponent teams against this team across all matches.
goal_diff - The result of goal_for - goal_against.
Return the result table ordered by points in descending order. If two or more teams have the same points, order them by goal_diff in descending order. If there is still a tie, order them by team_name in lexicographical order.


with flipped as (
    select *, case when home_team_goals>away_team_goals then 3
    when home_team_goals<away_team_goals then 0
    when home_team_goals=away_team_goals then 1 end as points
    from
    (select home_team_id, home_team_goals, away_team_goals
    from Matches
    union all
    select away_team_id as home_team_id,away_team_goals as home_team_goals,
    home_team_goals as away_team_goals
    from Matches) as t1
),

tab1 as (
    select *, goal_for-goal_against as goal_diff
    from
    (select home_team_id, count(*) as matches_played, sum(home_team_goals) as goal_for,
    sum(away_team_goals) as goal_against, sum(points) as points
    from flipped
    group by home_team_id) as t2
)

select team_name, matches_played, points, goal_for, goal_against, goal_diff
from tab1
join Teams
on tab1.home_team_id=Teams.team_id
order by points desc, goal_diff desc, team_name
